services:
  control:
    build:
      context: .
      dockerfile: backend.Dockerfile
      args:
        BUILD_CONTEXT: control
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SERVER_NAME: control
      SERVER_PORT: 3001
      MONGO_CONNECTION_STRING: ${MONGO_CONNECTION_STRING}
      WEBAPP_URL: ${WEBAPP_URL}
      JWT_SECRET_TOKEN: ${JWT_SECRET_TOKEN}
    depends_on:
      mongo:
        condition: service_healthy
  storage:
    build:
      context: .
      dockerfile: backend.Dockerfile
      args:
        BUILD_CONTEXT: storage
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SERVER_NAME: storage
      SERVER_PORT: 3002
      MONGO_CONNECTION_STRING: ${MONGO_CONNECTION_STRING}
      STORAGE_GCP_PROJECT_ID: ${STORAGE_GCP_PROJECT_ID}
      STORAGE_GCP_PRIVATE_KEY_ID: ${STORAGE_GCP_PRIVATE_KEY_ID}
      STORAGE_GCP_PRIVATE_KEY: ${STORAGE_GCP_PRIVATE_KEY}
      STORAGE_GCP_CLIENT_EMAIL: ${STORAGE_GCP_CLIENT_EMAIL}
      STORAGE_GCP_CLIENT_ID: ${STORAGE_GCP_CLIENT_ID}
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME}
      WEBAPP_URL: ${WEBAPP_URL}
      JWT_SECRET_TOKEN: ${JWT_SECRET_TOKEN}
    depends_on:
      mongo:
        condition: service_healthy
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_URL=${BACKEND_DOMAIN}
        - NEXT_PUBLIC_LOG_LEVEL=${LOG_LEVEL:-INFO}
        - NEXT_PUBLIC_GTM_ID=${GTM_ID}
        - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
        - NEXT_PUBLIC_VAPID_PUBLIC_KEY=${VAPID_PUBLIC}
    environment:
      BACKEND_SERVER_API: ${BACKEND_HOST}:3001
      STORAGE_SERVER_API: ${STORAGE_HOST}:3002
      AUTH_URL: ${AUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_LOGIN_REDIRECT_URI: ${GOOGLE_LOGIN_REDIRECT_URI}
      NEXT_TOKEN: ${NEXT_TOKEN}
    ports:
      - "3000:3000"
    depends_on:
      - control
  mongo:
    image: mongo:7.0.1
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "-u", "root", "-p", "example", "--authenticationDatabase", "admin", "--eval", "db.runCommand({ usersInfo: { user: 'control-msc-user', db: 'PLACEHOLDER_NAME_DB' } }).ok"]
      interval: 5s
      timeout: 5s
      retries: 15
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS:-example}

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    build:
        context: ./nginx
        dockerfile: Dockerfile
    environment:
      FRONTEND_HOST: ${FRONTEND_HOST}
      CONTROL_HOST: ${CONTROL_HOST}
      STORAGE_HOST: ${STORAGE_HOST}
      DOMAIN: ${DOMAIN}
      API_DOMAIN: ${API_DOMAIN}
    ports:
      - "80:80"
    depends_on:
      - control
      - storage
      - frontend
    volumes:
      - ./nginx/templates:/etc/nginx/templates
